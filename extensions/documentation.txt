========== time/now ==========
Usage: (time/now)

Returns current time.

========== time/zero ==========
Usage: (time/zero)

Returns time 0001-01-01 00:00:00.

========== time/format ==========
Usage:
(time/format Time 'timestamp) => Time to unix timestamp(integer)
(time/format Time 'timestamp-ms) => Time to unix timestamp mills(integer)
(time/format Time 'timestamp-micro) => Time to unix timestamp microseconds(integer)
(time/format Time 'timestamp-nano) => Time to unix timestamp nanoseconds(integer)
(time/format Time "2006-01-02 15:04:05") => Time to string by layout(string)
(time/format Time "2006-01-02 15:04:05" "Asia/Shanghai") => Time to string by layout(string) and location

Format time to string.

========== time/parse ==========
Usage:
(time/parse 1655967400280) => parse unix timestamp to Time
(time/parse 1655967400280000 'timestamp-ms) => parse unix milli timestamp to Time
(time/parse 1655967400280000 'timestamp-micro) => parse unix micro timestamp to Time
(time/parse 1655967400280000 'timestamp-nano) => parse unix nano timestamp to Time
(time/parse "2015-02-23 23:54:55") => parse time by value, try with layout 2006-01-02 15:04:05 or  2006-01-02T15:04:05Z07:00
(time/parse "2014-Feb-04" "2006-Jan-02") => parse time by value and layout
(time/parse "2014-Feb-04" "2006-Jan-02" "Asia/Shanghai") => parse time by value and layout and location

Parse timestamp or time string to time.

========== time/add-date ==========
Usage: (time/add-date Time year month day)

example:
(time/add-date (time/now) 3 2 1)

========== time/add ==========
Usage: (time/add Time x unit)

Add x year/month/day/hour/minute/second to time.

examples:
(time/add (time/now) 2 'year)
(time/add (time/now) 3 'month)
(time/add (time/now) 1 'day)

========== time/sub ==========
Usage: (time/sub t1 t2)

Returns t1 - t2 in seconds.

========== time/year ==========
Usage: (time/year t)

Returns year number of time.

========== time/month ==========
Usage: (time/month t)

Returns month number of time.

========== time/day ==========
Usage: (time/day t)

Returns day number of time.

========== time/hour ==========
Usage: (time/hour t)

Returns hour number of time.

========== time/minute ==========
Usage: (time/minute t)

Returns minute number of time.

========== time/second ==========
Usage: (time/second t)

Returns second number of time.

========== time/weekday ==========
Usage: (time/weekday t)

Returns weekday number of time, range [0,6] from sunday to saturday.

========== base64/decode ==========
Usage: (base64/decode str)

Decode base64 encoded string to bytes.

========== base64/encode ==========
Usage: (base64/encode bytes)

Encode bytes to string.

========== http/get ==========
Usage: (http/get options url)

Available options:
-H "key:val"
  add custom header with key-val pair string.

-i
  include response header in output.

-timeout val
  set request timeout. If val is integer, means timeout in seconds. Or val can be duration string. like:
  "300ms", "1.5h", "2h45m" etc.
  Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".

-X method
  custom http method, only make sense in function http/curl.

-d data
  data can be string, bytes, array, list, hash, int, float or bool. For array, list, hash, the header `Content-Type: application/json` would be set automatic.

-ignore-error
  ignore http network error

-v
  verbose.

-o
  save response to file.

========== http/post ==========
Usage: (http/post options url)

Available options:
-H "key:val"
  add custom header with key-val pair string.

-i
  include response header in output.

-timeout val
  set request timeout. If val is integer, means timeout in seconds. Or val can be duration string. like:
  "300ms", "1.5h", "2h45m" etc.
  Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".

-X method
  custom http method, only make sense in function http/curl.

-d data
  data can be string, bytes, array, list, hash, int, float or bool. For array, list, hash, the header `Content-Type: application/json` would be set automatic.

-ignore-error
  ignore http network error

-v
  verbose.

-o
  save response to file.

========== http/put ==========
Usage: (http/put options url)

Available options:
-H "key:val"
  add custom header with key-val pair string.

-i
  include response header in output.

-timeout val
  set request timeout. If val is integer, means timeout in seconds. Or val can be duration string. like:
  "300ms", "1.5h", "2h45m" etc.
  Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".

-X method
  custom http method, only make sense in function http/curl.

-d data
  data can be string, bytes, array, list, hash, int, float or bool. For array, list, hash, the header `Content-Type: application/json` would be set automatic.

-ignore-error
  ignore http network error

-v
  verbose.

-o
  save response to file.

========== http/patch ==========
Usage: (http/patch options url)

Available options:
-H "key:val"
  add custom header with key-val pair string.

-i
  include response header in output.

-timeout val
  set request timeout. If val is integer, means timeout in seconds. Or val can be duration string. like:
  "300ms", "1.5h", "2h45m" etc.
  Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".

-X method
  custom http method, only make sense in function http/curl.

-d data
  data can be string, bytes, array, list, hash, int, float or bool. For array, list, hash, the header `Content-Type: application/json` would be set automatic.

-ignore-error
  ignore http network error

-v
  verbose.

-o
  save response to file.

========== http/delete ==========
Usage: (http/delete options url)

Available options:
-H "key:val"
  add custom header with key-val pair string.

-i
  include response header in output.

-timeout val
  set request timeout. If val is integer, means timeout in seconds. Or val can be duration string. like:
  "300ms", "1.5h", "2h45m" etc.
  Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".

-X method
  custom http method, only make sense in function http/curl.

-d data
  data can be string, bytes, array, list, hash, int, float or bool. For array, list, hash, the header `Content-Type: application/json` would be set automatic.

-ignore-error
  ignore http network error

-v
  verbose.

-o
  save response to file.

========== http/options ==========
Usage: (http/options options url)

Available options:
-H "key:val"
  add custom header with key-val pair string.

-i
  include response header in output.

-timeout val
  set request timeout. If val is integer, means timeout in seconds. Or val can be duration string. like:
  "300ms", "1.5h", "2h45m" etc.
  Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".

-X method
  custom http method, only make sense in function http/curl.

-d data
  data can be string, bytes, array, list, hash, int, float or bool. For array, list, hash, the header `Content-Type: application/json` would be set automatic.

-ignore-error
  ignore http network error

-v
  verbose.

-o
  save response to file.


========== http/head ==========
Usage: (http/head options url)

Available options:
-H "key:val"
  add custom header with key-val pair string.

-i
  include response header in output.

-timeout val
  set request timeout. If val is integer, means timeout in seconds. Or val can be duration string. like:
  "300ms", "1.5h", "2h45m" etc.
  Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".

-X method
  custom http method, only make sense in function http/curl.

-d data
  data can be string, bytes, array, list, hash, int, float or bool. For array, list, hash, the header `Content-Type: application/json` would be set automatic.

-ignore-error
  ignore http network error

-v
  verbose.

-o
  save response to file.

========== http/curl ==========
Usage: (http/curl options url)

Available options:
-H "key:val"
  add custom header with key-val pair string.

-i
  include response header in output.

-timeout val
  set request timeout. If val is integer, means timeout in seconds. Or val can be duration string. like:
  "300ms", "1.5h", "2h45m" etc.
  Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".

-X method
  custom http method, only make sense in function http/curl.

-d data
  data can be string, bytes, array, list, hash, int, float or bool. For array, list, hash, the header `Content-Type: application/json` would be set automatic.

-v
  verbose.

-o
  save response to file.

-ignore-error
  ignore http network error

========== json/stringify ==========
Usage: (json/stringify x)
(json/stringify x true)

Stringify json object. The json string would be indented with extra bool argument.

========== json/parse ==========
Usage: (json/parse str)
(json/parse str DEFAULT)

Parse json string to object. return DEFAULT if input str is invalid.

========== json/query ==========
Usage: (json/query x path)
(json/query x path DEFAULT)

Query json object by path.

========== json/set ==========
Usage: (json/set x path value)

Set json object by path.

example:

(json/set {"a" {"b" 1}} "a.b" 2) ; return {"a" {"b" 2}}

========== json/del ==========
Usage: (json/del x path)

Remove json node by path.

example:

(json/del {"a" {"b" 1}} "a.b") ; return {"a" {}}

========== os/read-file ==========
Usage: (os/read-file file)

Return file content as bytes.

========== os/mkdir ==========
Usage: (os/mkdir dirname)

Make directory.

========== os/write-file ==========
Usage: (os/write-file file x)

Write string or bytes to file.

========== os/file-exist? ==========
Usage: (os/file-exist? file)

Check file existence.

========== os/remove-file ==========
Usage: (os/remove-file file)

Remove file from disk.

========== os/exec ==========
Usage: (os/exec args)

Execute os command. Returns command result conscell (status . stdout/stderr).

examples:
(os/exec "ls -l")
(os/exec "ps -ef | grep glisp")
(os/exec {"cmd" "ls"})
(os/exec {"cmd" "ls" "env" ["k1=v1" "k2=v2"] "stdout" writer "stderr" writer})
(os/exec {"cmd" "ls" "env" ["k1=v1" "k2=v2"] "cwd" "/tmp" "stdout" writer "stderr" writer})

========== os/exec! ==========
Usage: (os/exec! args)

Execute os command. Returns command result conscell (status . stdout/stderr).

examples:
(os/exec! "ls -l")
(os/exec! "ps -ef | grep glisp")
(os/exec! {"cmd" "ls"})
(os/exec! {"cmd" "ls" "env" ["k1=v1" "k2=v2"] "stdout" writer "stderr" writer})
(os/exec!  {"cmd" "ls" "env" ["k1=v1" "k2=v2"] "cwd" "/tmp" "stdout" writer "stderr" writer})

========== os/env ==========
Usage: (os/env name)

Get environment variable.

========== os/setenv ==========
Usage: (os/setenv name value)

Set environment variable.

========== rand ==========
Usage: (rand)
(rand n)

Generate random integer in [0,100) or [0,n).

========== randf ==========
Usage: (randf)

Generate random integer in [0,1).

========== regexp-compile ==========
Usage: (regexp-compile str)

Generate a regexp expression.

========== regexp-find-index ==========
Usage: (regexp-find-index regexp str)

Returns location index array.

========== regexp-find ==========
Usage: (regexp-find regexp str)

Returns found string.

========== regexp-match ==========
Usage: (regexp-match regexp str)

Returns true if matched.

========== str/start-with? ==========
Usage: (str/start-with? s substr)

Tests whether the string s begins with prefix.

(str/start-with? s substr)

Tests whether the string s begins with prefix ignore case.

========== str/end-with? ==========
Usage: (str/end-with? s substr)

Tests whether the string s ends with suffix.

(str/end-with? s substr true)

Tests whether the string s ends with suffix ignore case.

========== str/contains? ==========
Usage: (str/contains? s substr)

Reports whether substr is within s.

(str/contains? s substr true)
Reports whether substr is within s ignore case.

========== str/title ==========
Usage: (str/title s)

Returns a copy of the string s with all Unicode letters that begin words
mapped to their Unicode title case.


========== str/lower ==========
Usage: (str/lower s)

Returns s with all Unicode letters mapped to their lower case.

========== str/upper ==========
Usage: (str/upper s)

Returns s with all Unicode letters mapped to their upper case.

========== str/equal-fold? ==========
Usage: (str/equal-fold? s1 s2)

str/equal-fold? reports whether s and t, interpreted as UTF-8 strings,
are equal under Unicode case-folding, which is a more general
form of case-insensitivity.

========== str/repeat ==========
Usage: (str/repeat s n)

str/repeat returns a new string consisting of n copies of the string s.

========== str/replace ==========
Usage: (str/replace s old new)

Returns a copy of the string s with all
non-overlapping instances of old replaced by new.
If old is empty, it matches at the beginning of the string
and after each UTF-8 sequence, yielding up to k+1 replacements
for a k-rune string.

========== str/trim-prefix ==========
Usage: (str/trim-prefix s prefix)

Returns s without the provided leading prefix string.
If s doesn't start with prefix, s is returned unchanged.


========== str/trim-suffix ==========
Usage: (str/trim-suffix s suffix)

Returns s without the provided trailing suffix string.
If s doesn't end with suffix, s is returned unchanged.


========== str/trim-space ==========
Usage: (str/trim-space s)

Returns a slice of the string s, with all leading
and trailing white space removed, as defined by Unicode.

========== str/count ==========
Usage: (str/count str substr)

Counts the number of non-overlapping instances of substr in str.
If substr is an empty string, Count returns 1 + the number of Unicode code points in str.

========== str/index ==========
Usage: (str/index s substr)

Returns the index of the first instance of substr in s, or -1 if substr is not present in s.

========== str/split ==========
Usage: (str/split s sep)

Slices s into all substrings separated by sep and returns a slice of
the substrings between those separators.

If s does not contain sep and sep is not empty, Split returns a
slice of length 1 whose only element is s.

If sep is empty, Split splits after each UTF-8 sequence. If both s
and sep are empty, Split returns an empty slice.

(str/split s sep n)

split slices s into substrings separated by sep and returns a slice of
the substrings between those separators.

The count determines the number of substrings to return:
  n > 0: at most n substrings; the last substring will be the unsplit remainder.
  n == 0: the result is nil (zero substrings)
  n < 0: all substrings

========== str/join ==========
Usage: (str/join elems sep)

Concatenates the elements of its first argument to create a single string. The separator
string sep is placed between elements in the resulting string.

========== str/digit? ==========
Usage: (str/digit? s)

Test whether s only contains char 0-9.

========== str/alpha? ==========
Usage: (str/alpha? s)

Test whether s only contains char a-z A-Z.

========== str/title? ==========
Usage: (str/title? s)

Test whether s is title case.

========== str/integer? ==========
Usage: (str/integer? s)

Test whether s can be converted to an integer.

========== str/float? ==========
Usage: (str/float? s)

Test whether s can be converted to a float.

========== str/bool? ==========
Usage: (str/bool? s)

Test whether s can be converted to a bool.

========== str/md5 ==========
Usage: (str/md5 s)

Returns md5 of s.

========== str/mask ==========
Usage: (str/mask s start-idx length mask-str)

Mask substr from start-idx to start-idx+length by mask-str.
If length is -1, mask all substring from start-idx to the end.

example:
(str/mask "hello world" 5 2 "*") ; return "hello**orld"
(str/mask "hello world" 5 -1 "*") ; return "hello******"

========== map ==========
Usage: (map f coll)

Returns a sequence consisting of the result of applying f to
the set of first items of each coll, followed by applying f to the
set of second items in each coll, until any one of the colls is
exhausted. coll can be array or list or strema or even hash.

========== flatmap ==========
Usage: (flatmap f coll)

Applies f to every value in the reduction of coll, concatenating the result
colls of (f val). Foldable.

========== foldl ==========
Usage: (foldl f accumulate coll)

Reduce a list/array/hash by function f.

When coll is array or list, function `f` should take 2 arguments, first is element of coll, second argument is accumulate value.
When coll is hash, function `f` should take 3 arguments, first and second is hash key-value pair, and the third argument is accumulate value.

example:
(foldl + 0 [1 2 3])
(foldl (fn [kv acc] (+ acc (cdr kv))) 0 {"a" 1 "b" 2})

========== filter ==========
Usage: (filter pred coll)

Returns a sequence of the items in coll for which
(pred item) returns logical true. pred must be free of side-effects.

When coll is hash, pred function should take 2 arguments, which are hash key-value pair.

========== flatten ==========
Usage: (flatten coll)

Takes any nested combination of sequential things (lists, arrays, stream
etc.) and returns their contents as a single, flat foldable
collection.

========== realize ==========
Usage: (realize stream)

Return real list of the stream.

========== take ==========
Usage: (take n stream)

Take first n elements of the stream.

(take f stream)

Take first x elements of the stream until f(elem) return false.

========== drop ==========
Usage: (drop n stream)

Drop first n elements of the stream.

(drop f stream)

Drop first x elements of the stream until f(elem) return false.

========== range ==========
Usage: (range)
(range end)
(range start end)
(range start end step)

Returns a lazy seq of nums from start (inclusive) to end
(exclusive), by step, where start defaults to 0, step to 1, and end to
infinity. When step is equal to 0, returns an infinite sequence of
start. When start is equal to end, returns empty list.

========== streamable? ==========
Usage: (streamable? x)

Return true if x implement Iterable interface.

type Iterable interface {
        glisp.Sexp
        Next() (glisp.Sexp, bool)
}

Besides, builtin types string/array/bytes/list/hash are streamable.

========== stream? ==========
Usage: (stream? x)

Return true if x is a stream.

========== stream ==========
Usage: (stream x)

Transform x to a stream. This function can convert builtin types string/array/bytes/list/hash or any Iterable object to a stream.

========== partition ==========
Usage: (partition n stream)

Partition stream into groups stream, every group size is n.

(partition f stream)

Partition stream into groups stream by function f, exclude separator.

(partition f separator_on_head stream)

Partition stream into groups stream by function f, include separator on head or tail.


========== 0b ==========
Usage: (0b x)

Convert integer x to binary string.

========== 0o ==========
Usage: (0o x)

Convert integer x to octal string.

========== 0x ==========
Usage: (0x x)

Convert integer x to hex string.


========== sla ==========
Usage: (sla x n)

Shift left arithmetic x.

========== sra ==========
Usage: (sra x n)

Shift right arithmetic x.

========== bit-and ==========
Usage: (bit-and n1 n2 n3 ...)

Bitwise and.

========== bit-or ==========
Usage: (bit-or n1 n2 n3 ...)

Bitwise or.

========== bit-xor ==========
Usage: (bit-xor n1 n2 n3 ...)

Bitwise xor.

========== bit-not ==========
Usage: (bit-not x)

Bitwise not.

========== zip ==========
Usage: (zip stream1 stream2 ...)

Compose multiple stream to one, and every element of new stream is a list composite by stream-x's element.

========== union ==========
Usage: (union stream1 stream2 ...)

Concat streams.

========== sort ==========
Usage: (sort coll)

Sort array/list by asc.

(sort f coll)

Sort array/list by f.

e.g.
(sort #(> %1 %2) [1 2 3]) ;; return [3 2 1]

========== assoc ==========
Usage: (assoc record field value)

Set field value of record.

========== defrecord ==========
Usage: (defrecord TypeName (field1 type1) (field2 type2))

Define record type. Then, the type t constructor `->t` is available

(->t Field1 v1 Field2 v2)

(defrecord TypeName (field1 type1 tag1 default1) (field2 type2 tag2 default2))

Define record with tag and default value.

========== record? ==========
Usage: (record? x)

Return true if x is a record.

========== record-of? ==========
Usage: (record-of? x cls)

Return true if x is a record of class cls.

========== doc ==========
Usage: (doc f)

Show documentation of f.

========== compose ==========
Usage: (compose f1 f2 & more)

Composes its arguments into a single composite function. All its arguments are assumed to designate functions which take one argument and return one argument.

((compose f g) 42) is equivalent to (f (g 42)). Composition is right-associative.

========== record-class? ==========
Usage: (record-class? x)

Return true if x is a record class.

========== get-record-class ==========
Usage: (get-record-class x)

Return class of record x.

========== record-class-definition ==========
Usage: (record-class-definition x)

Return class object definition of record class x.

========== os/read-dir ==========
Usage: (os/read-dir x)

Return files in dir x.
